// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tests

import (
	"context"
	"github.com/Checkmarx-Containers/containers-worker/internal/scanStatus"
	scan_status_service1 "github.com/Checkmarx-Containers/containers-worker/internal/scanStatus/service"

	"google.golang.org/protobuf/types/known/timestamppb"
	"sync"
)

// Ensure, that ScanStatusServiceIntMock does implement ScanStatusServiceInt.
// If this is not the case, regenerate this file with moq.
var _ scan_status_service1.ScanStatusServiceInt = &ScanStatusServiceIntMock{}

// ScanStatusServiceIntMock is a mock implementation of ScanStatusServiceInt.
//
//	func TestSomethingThatUsesScanStatusServiceInt(t *testing.T) {
//
//		// make and configure a mocked ScanStatusServiceInt
//		mockedScanStatusServiceInt := &ScanStatusServiceIntMock{
//			GetScanStatusDetailsFunc: func(ctx context.Context, scanId string) (*scan_status_service.ScanStatus, error) {
//				panic("mock out the GetScanStatusDetails method")
//			},
//			SaveScanStatusFunc: func(ctx context.Context, scanStatus scan_status_service.ScanStatus) error {
//				panic("mock out the SaveScanStatus method")
//			},
//			UpdateScanStatusFunc: func(ctx context.Context, scanId string, status string, updateTime *timestamppb.Timestamp) error {
//				panic("mock out the UpdateScanStatus method")
//			},
//			UpdateScanStatusDetailsFunc: func(ctx context.Context, scanId string, stepName string, status string, updateTime *timestamppb.Timestamp) error {
//				panic("mock out the UpdateScanStatusDetails method")
//			},
//		}
//
//		// use mockedScanStatusServiceInt in code that requires ScanStatusServiceInt
//		// and then make assertions.
//
//	}
type ScanStatusServiceIntMock struct {
	// GetScanStatusDetailsFunc mocks the GetScanStatusDetails method.
	GetScanStatusDetailsFunc func(ctx context.Context, scanId string) (*scan_status_service.ScanStatus, error)

	// SaveScanStatusFunc mocks the SaveScanStatus method.
	SaveScanStatusFunc func(ctx context.Context, scanStatus scan_status_service.ScanStatus) error

	// UpdateScanStatusFunc mocks the UpdateScanStatus method.
	UpdateScanStatusFunc func(ctx context.Context, scanId string, status string, updateTime *timestamppb.Timestamp) error

	// UpdateScanStatusDetailsFunc mocks the UpdateScanStatusDetails method.
	UpdateScanStatusDetailsFunc func(ctx context.Context, scanId string, stepName string, status string, updateTime *timestamppb.Timestamp) error

	// calls tracks calls to the methods.
	calls struct {
		// GetScanStatusDetails holds details about calls to the GetScanStatusDetails method.
		GetScanStatusDetails []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ScanId is the scanId argument value.
			ScanId string
		}
		// SaveScanStatus holds details about calls to the SaveScanStatus method.
		SaveScanStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ScanStatus is the scanStatus argument value.
			ScanStatus scan_status_service.ScanStatus
		}
		// UpdateScanStatus holds details about calls to the UpdateScanStatus method.
		UpdateScanStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ScanId is the scanId argument value.
			ScanId string
			// Status is the status argument value.
			Status string
			// UpdateTime is the updateTime argument value.
			UpdateTime *timestamppb.Timestamp
		}
		// UpdateScanStatusDetails holds details about calls to the UpdateScanStatusDetails method.
		UpdateScanStatusDetails []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ScanId is the scanId argument value.
			ScanId string
			// StepName is the stepName argument value.
			StepName string
			// Status is the status argument value.
			Status string
			// UpdateTime is the updateTime argument value.
			UpdateTime *timestamppb.Timestamp
		}
	}
	lockGetScanStatusDetails    sync.RWMutex
	lockSaveScanStatus          sync.RWMutex
	lockUpdateScanStatus        sync.RWMutex
	lockUpdateScanStatusDetails sync.RWMutex
}

// GetScanStatusDetails calls GetScanStatusDetailsFunc.
func (mock *ScanStatusServiceIntMock) GetScanStatusDetails(ctx context.Context, scanId string) (*scan_status_service.ScanStatus, error) {
	if mock.GetScanStatusDetailsFunc == nil {
		panic("ScanStatusServiceIntMock.GetScanStatusDetailsFunc: method is nil but ScanStatusServiceInt.GetScanStatusDetails was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ScanId string
	}{
		Ctx:    ctx,
		ScanId: scanId,
	}
	mock.lockGetScanStatusDetails.Lock()
	mock.calls.GetScanStatusDetails = append(mock.calls.GetScanStatusDetails, callInfo)
	mock.lockGetScanStatusDetails.Unlock()
	return mock.GetScanStatusDetailsFunc(ctx, scanId)
}

// GetScanStatusDetailsCalls gets all the calls that were made to GetScanStatusDetails.
// Check the length with:
//
//	len(mockedScanStatusServiceInt.GetScanStatusDetailsCalls())
func (mock *ScanStatusServiceIntMock) GetScanStatusDetailsCalls() []struct {
	Ctx    context.Context
	ScanId string
} {
	var calls []struct {
		Ctx    context.Context
		ScanId string
	}
	mock.lockGetScanStatusDetails.RLock()
	calls = mock.calls.GetScanStatusDetails
	mock.lockGetScanStatusDetails.RUnlock()
	return calls
}

// SaveScanStatus calls SaveScanStatusFunc.
func (mock *ScanStatusServiceIntMock) SaveScanStatus(ctx context.Context, scanStatus scan_status_service.ScanStatus) error {
	if mock.SaveScanStatusFunc == nil {
		panic("ScanStatusServiceIntMock.SaveScanStatusFunc: method is nil but ScanStatusServiceInt.SaveScanStatus was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ScanStatus scan_status_service.ScanStatus
	}{
		Ctx:        ctx,
		ScanStatus: scanStatus,
	}
	mock.lockSaveScanStatus.Lock()
	mock.calls.SaveScanStatus = append(mock.calls.SaveScanStatus, callInfo)
	mock.lockSaveScanStatus.Unlock()
	return mock.SaveScanStatusFunc(ctx, scanStatus)
}

// SaveScanStatusCalls gets all the calls that were made to SaveScanStatus.
// Check the length with:
//
//	len(mockedScanStatusServiceInt.SaveScanStatusCalls())
func (mock *ScanStatusServiceIntMock) SaveScanStatusCalls() []struct {
	Ctx        context.Context
	ScanStatus scan_status_service.ScanStatus
} {
	var calls []struct {
		Ctx        context.Context
		ScanStatus scan_status_service.ScanStatus
	}
	mock.lockSaveScanStatus.RLock()
	calls = mock.calls.SaveScanStatus
	mock.lockSaveScanStatus.RUnlock()
	return calls
}

// UpdateScanStatus calls UpdateScanStatusFunc.
func (mock *ScanStatusServiceIntMock) UpdateScanStatus(ctx context.Context, scanId string, status string, updateTime *timestamppb.Timestamp) error {
	if mock.UpdateScanStatusFunc == nil {
		panic("ScanStatusServiceIntMock.UpdateScanStatusFunc: method is nil but ScanStatusServiceInt.UpdateScanStatus was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ScanId     string
		Status     string
		UpdateTime *timestamppb.Timestamp
	}{
		Ctx:        ctx,
		ScanId:     scanId,
		Status:     status,
		UpdateTime: updateTime,
	}
	mock.lockUpdateScanStatus.Lock()
	mock.calls.UpdateScanStatus = append(mock.calls.UpdateScanStatus, callInfo)
	mock.lockUpdateScanStatus.Unlock()
	return mock.UpdateScanStatusFunc(ctx, scanId, status, updateTime)
}

// UpdateScanStatusCalls gets all the calls that were made to UpdateScanStatus.
// Check the length with:
//
//	len(mockedScanStatusServiceInt.UpdateScanStatusCalls())
func (mock *ScanStatusServiceIntMock) UpdateScanStatusCalls() []struct {
	Ctx        context.Context
	ScanId     string
	Status     string
	UpdateTime *timestamppb.Timestamp
} {
	var calls []struct {
		Ctx        context.Context
		ScanId     string
		Status     string
		UpdateTime *timestamppb.Timestamp
	}
	mock.lockUpdateScanStatus.RLock()
	calls = mock.calls.UpdateScanStatus
	mock.lockUpdateScanStatus.RUnlock()
	return calls
}

// UpdateScanStatusDetails calls UpdateScanStatusDetailsFunc.
func (mock *ScanStatusServiceIntMock) UpdateScanStatusDetails(ctx context.Context, scanId string, stepName string, status string, updateTime *timestamppb.Timestamp) error {
	if mock.UpdateScanStatusDetailsFunc == nil {
		panic("ScanStatusServiceIntMock.UpdateScanStatusDetailsFunc: method is nil but ScanStatusServiceInt.UpdateScanStatusDetails was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ScanId     string
		StepName   string
		Status     string
		UpdateTime *timestamppb.Timestamp
	}{
		Ctx:        ctx,
		ScanId:     scanId,
		StepName:   stepName,
		Status:     status,
		UpdateTime: updateTime,
	}
	mock.lockUpdateScanStatusDetails.Lock()
	mock.calls.UpdateScanStatusDetails = append(mock.calls.UpdateScanStatusDetails, callInfo)
	mock.lockUpdateScanStatusDetails.Unlock()
	return mock.UpdateScanStatusDetailsFunc(ctx, scanId, stepName, status, updateTime)
}

// UpdateScanStatusDetailsCalls gets all the calls that were made to UpdateScanStatusDetails.
// Check the length with:
//
//	len(mockedScanStatusServiceInt.UpdateScanStatusDetailsCalls())
func (mock *ScanStatusServiceIntMock) UpdateScanStatusDetailsCalls() []struct {
	Ctx        context.Context
	ScanId     string
	StepName   string
	Status     string
	UpdateTime *timestamppb.Timestamp
} {
	var calls []struct {
		Ctx        context.Context
		ScanId     string
		StepName   string
		Status     string
		UpdateTime *timestamppb.Timestamp
	}
	mock.lockUpdateScanStatusDetails.RLock()
	calls = mock.calls.UpdateScanStatusDetails
	mock.lockUpdateScanStatusDetails.RUnlock()
	return calls
}
